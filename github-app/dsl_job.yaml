jobs:
  - script: >
      pipelineJob('GitHub Webhook handler') {
        triggers {
          genericTrigger {
            genericVariables {
              genericVariable {
                key("payload")
                value("\$")
              }
            }
            genericHeaderVariables {
              genericHeaderVariable {
                key("x-github-event")
                regexpFilter("")
              }
            }
            causeString('Event "\^${x_github_event}", action "\^${payload_action}"')
            token('UniversumGitHub')
            printContributedVariables(false)
            printPostContent(false)
            silentResponse(false)
            regexpFilterText("")
            regexpFilterExpression("")
          }
        }
        parameters {
          stringParam("GITHUB_INTEGRATION", "36358", "")
        }
        definition {
          cps {
            script("""\
            pipeline {
              agent any
              environment {
                GITHUB_KEY = credentials('github-private-key')
                GITHUB_TOKEN = sh (
                  script: "python2 /opt/get-github-app-token.py -k \\\"\^${GITHUB_KEY}\\\" -it \^${GITHUB_INTEGRATION} -is \^${payload_installation_id}",
                  returnStdout: true
                ).trim()
              }
              stages {
                stage ('Create check run') {
                  when {
                    anyOf {
                      environment name: 'payload_repository_full_name', value: "k-dovgan/test"
                      environment name: 'payload_repository_full_name', value: "Samsung/Universum"
                    }
                    environment name: 'x_github_event', value: "check_suite"
                    anyOf {
                      environment name: 'payload_action', value: "requested"
                      environment name: 'payload_action', value: "rerequested"
                    }
                  }
                  steps {
                    echo "Will create a check run for \^${payload_check_suite_head_sha} with token \^${GITHUB_TOKEN}"
                    httpRequest customHeaders: [
                      [maskValue: false, name: 'Authorization', value: "token \^${GITHUB_TOKEN}"],
                      [maskValue: false, name: 'Accept', value: 'application/vnd.github.antiope-preview+json']
                    ], httpMode: 'POST', requestBody: \"\"\"{
                    "name": "CI tests",
                    "head_sha": "\^${payload_check_suite_head_sha}"
                    }\"\"\", url: "\^${payload_repository_url}/check-runs"
                  }
                }
                stage ("Update check run") {
                  when {
                    anyOf {
                      environment name: 'payload_repository_full_name', value: "k-dovgan/test"
                      environment name: 'payload_repository_full_name', value: "Samsung/Universum"
                    }
                    environment name: 'x_github_event', value: "check_run"
                    environment name: 'payload_check_run_app_id', value: "\^${GITHUB_INTEGRATION}"
                    anyOf {
                      environment name: 'payload_action', value: "created"
                      environment name: 'payload_action', value: "requested"
                      environment name: 'payload_action', value: "rerequested"
                    }
                  }
                  steps {
                    echo "Will check commit \^${payload_check_run_head_sha} with token \^${GITHUB_TOKEN}"
                    build job: "Check commit", parameters: [
                      [
                        \$class: "StringParameterValue",
                        name: "GIT_REFSPEC",
                        value: "\^${payload_check_run_check_suite_head_branch}"
                      ], [
                        \$class: "StringParameterValue",
                        name: "GIT_CHECKOUT_ID",
                        value: "\^${payload_check_run_head_sha}"
                      ], [
                        \$class: "StringParameterValue",
                        name: "GITHUB_TOKEN",
                        value: "\^${GITHUB_TOKEN}"
                      ], [
                        \$class: "StringParameterValue",
                        name: "GITHUB_CHECK_ID",
                        value: "\^${payload_check_run_id}"
                      ], [
                        \$class: "StringParameterValue",
                        name: "GIT_REPO",
                        value: "\^${payload_repository_clone_url}"
                      ]
                    ]
                  }
                }
              }
            }""".stripIndent())
            sandbox()
          }
        }
      }
